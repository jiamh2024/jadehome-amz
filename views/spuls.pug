doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title Product SPU List
    script(src="https://fastly.jsdelivr.net/npm/axios/dist/axios.min.js")
    style.
      body {
        font-family: Arial, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }
      h1 {
        color: #333;
      }
      .search-container {
        margin-bottom: 20px;
        display: flex;
        gap: 10px;
      }
      .search-input {
        flex-grow: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      button {
        background-color: #4CAF50;
        color: white;
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      button:hover {
        background-color: #45a049;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
      }
      th, td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
      }
      th {
        background-color: #f2f2f2;
        cursor: pointer;
      }
      tr:nth-child(even) {
        background-color: #f9f9f9;
      }
      tr:hover {
        background-color: #f1f1f1;
      }
      .pagination {
        display: flex;
        justify-content: center;
        gap: 5px;
      }
      .pagination button {
        padding: 5px 10px;
      }
      .pagination button.active {
        background-color: #45a049;
      }
      .pagination button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
      }
      .action-buttons {
        display: flex;
        gap: 5px;
      }
      .view-btn {
        background-color: #2196F3;
      }
      .view-btn:hover {
        background-color: #0b7dda;
      }
      .edit-btn {
        background-color: #ff9800;
      }
      .edit-btn:hover {
        background-color: #e68a00;
      }
      .delete-btn {
        background-color: #f44336;
      }
      .delete-btn:hover {
        background-color: #da190b;
      }
      .message {
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 15px;
      }
      .success {
        background-color: #dff0d8;
        color: #3c763d;
      }
      .error {
        background-color: #f2dede;
        color: #a94442;
      }
      .loading {
        text-align: center;
        padding: 20px;
        font-style: italic;
        color: #666;
      }
  body
    h1 Product SPU List

    #messageContainer

    .search-container
      input(type='text' id='searchInput' class='search-input' placeholder='Search by SPU name or description...')
      button(id='searchBtn') Search
      button(id='resetBtn') Reset

    #loadingContainer.loading Loading data...

    table#spuTable(style='display: none;')
      thead
        tr
          th SPU ID
          th SPU Name
          th Category ID
          th Brand ID
          th Variant Attributes
          th Description
          th Status
          th Actions
      tbody#spuTableBody

    .pagination#pagination

    script.
      // 全局变量
      let currentPage = 1;
      const itemsPerPage = 10;
      let totalItems = 0;
      let allSpuData = [];
      let filteredSpuData = [];

      // DOM元素
      const spuTable = document.getElementById('spuTable');
      const spuTableBody = document.getElementById('spuTableBody');
      const loadingContainer = document.getElementById('loadingContainer');
      const messageContainer = document.getElementById('messageContainer');
      const searchInput = document.getElementById('searchInput');
      const searchBtn = document.getElementById('searchBtn');
      const resetBtn = document.getElementById('resetBtn');
      const pagination = document.getElementById('pagination');

      // 初始化
      document.addEventListener('DOMContentLoaded', async function() {
        await fetchSpuData();
        renderTable();
        setupEventListeners();
      });

      // 获取SPU数据
      async function fetchSpuData() {
        try {
          showLoading(true);
          const response = await axios.get('/api/spu');
          allSpuData = response.data;
          filteredSpuData = [...allSpuData];
          totalItems = filteredSpuData.length;
          calculatePagination();
        } catch (error) {
          showMessage('Error fetching SPU data: ' + (error.response?.data?.error || error.message), 'error');
        } finally {
          showLoading(false);
        }
      }

      // 渲染表格
      function renderTable() {
        if (filteredSpuData.length === 0) {
          spuTableBody.innerHTML = '<tr><td colspan="8" style="text-align: center;">No data found</td></tr>';
          spuTable.style.display = 'table';
          return;
        }

        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, filteredSpuData.length);
        const pageData = filteredSpuData.slice(startIndex, endIndex);

        let tableHtml = '';
        pageData.forEach(spu => {
          // 格式化状态
          const statusText = spu.status === 1 ? 'Active' : 'Inactive';
          const statusClass = spu.status === 1 ? 'success' : 'error';

          // 格式化变体属性（假设是JSON字符串）
          let variantAttributes = spu.variant_attributes;
          try {
            if (variantAttributes && typeof variantAttributes === 'string') {
              const parsed = JSON.parse(variantAttributes);
              variantAttributes = Array.isArray(parsed) ? parsed.join(', ') : parsed;
            }
          } catch (e) {
            // 如果解析失败，保持原样
          }

          tableHtml += `
            <tr>
              <td>${spu.spu_id}</td>
              <td>${spu.spu_name}</td>
              <td>${spu.category_id}</td>
              <td>${spu.brand_id || '-'}</td>
              <td>${variantAttributes || '-'}</td>
              <td>${spu.description || '-'}</td>
              <td class="${statusClass}">${statusText}</td>
              <td class="action-buttons">
                <button class="view-btn" onclick="viewSpu(${spu.spu_id})">View</button>
                <button class="edit-btn" onclick="editSpu(${spu.spu_id})">Edit</button>
                <button class="delete-btn" onclick="deleteSpu(${spu.spu_id})">Delete</button>
              </td>
            </tr>
          `;
        });

        spuTableBody.innerHTML = tableHtml;
        spuTable.style.display = 'table';
        renderPagination();
      }

      // 渲染分页
      function renderPagination() {
        pagination.innerHTML = '';

        const totalPages = Math.ceil(totalItems / itemsPerPage);
        if (totalPages <= 1) return;

        // 上一页按钮
        const prevButton = document.createElement('button');
        prevButton.textContent = 'Previous';
        prevButton.disabled = currentPage === 1;
        prevButton.addEventListener('click', () => {
          if (currentPage > 1) {
            currentPage--;
            renderTable();
          }
        });
        pagination.appendChild(prevButton);

        // 页码按钮
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        if (endPage - startPage + 1 < maxVisiblePages) {
          startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        for (let i = startPage; i <= endPage; i++) {
          const pageButton = document.createElement('button');
          pageButton.textContent = i;
          if (i === currentPage) {
            pageButton.classList.add('active');
          }
          pageButton.addEventListener('click', () => {
            currentPage = i;
            renderTable();
          });
          pagination.appendChild(pageButton);
        }

        // 下一页按钮
        const nextButton = document.createElement('button');
        nextButton.textContent = 'Next';
        nextButton.disabled = currentPage === totalPages;
        nextButton.addEventListener('click', () => {
          if (currentPage < totalPages) {
            currentPage++;
            renderTable();
          }
        });
        pagination.appendChild(nextButton);
      }

      // 设置事件监听器
      function setupEventListeners() {
        searchBtn.addEventListener('click', handleSearch);
        resetBtn.addEventListener('click', handleReset);
        searchInput.addEventListener('keyup', function(event) {
          if (event.key === 'Enter') {
            handleSearch();
          }
        });
      }

      // 处理搜索
      function handleSearch() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        if (!searchTerm) {
          filteredSpuData = [...allSpuData];
        } else {
          filteredSpuData = allSpuData.filter(spu => 
            spu.spu_name.toLowerCase().includes(searchTerm) || 
            (spu.description && spu.description.toLowerCase().includes(searchTerm))
          );
        }
        totalItems = filteredSpuData.length;
        currentPage = 1;
        calculatePagination();
        renderTable();
      }

      // 处理重置
      function handleReset() {
        searchInput.value = '';
        filteredSpuData = [...allSpuData];
        totalItems = filteredSpuData.length;
        currentPage = 1;
        calculatePagination();
        renderTable();
      }

      // 计算分页
      function calculatePagination() {
        // 这个函数可以扩展以实现更复杂的分页逻辑
        // 目前分页逻辑主要在renderPagination中处理
      }

      // 显示/隐藏加载状态
      function showLoading(show) {
        loadingContainer.style.display = show ? 'block' : 'none';
        spuTable.style.display = show ? 'none' : 'table';
      }

      // 显示消息
      function showMessage(text, type) {
        messageContainer.innerHTML = `<div class="message ${type}">${text}</div>`;
        setTimeout(() => {
          messageContainer.innerHTML = '';
        }, 5000);
      }

      // 全局函数（供按钮调用）
      window.viewSpu = function(id) {
        showMessage(`Viewing SPU with ID: ${id}`, 'success');
        // 这里可以添加跳转到详情页的逻辑
        // window.location.href = `/spu/${id}`;
      };

      window.editSpu = function(id) {
        showMessage(`Editing SPU with ID: ${id}`, 'success');
        // 这里可以添加跳转到编辑页的逻辑
        // window.location.href = `/spu/${id}/edit`;
      };

      window.deleteSpu = async function(id) {
        if (confirm('Are you sure you want to delete this SPU?')) {
          try {
            showLoading(true);
            await axios.delete(`/api/spu/${id}`);
            showMessage('SPU deleted successfully', 'success');
            await fetchSpuData(); // 重新获取数据
            renderTable();
          } catch (error) {
            showMessage('Error deleting SPU: ' + (error.response?.data?.error || error.message), 'error');
          } finally {
            showLoading(false);
          }
        }
      };