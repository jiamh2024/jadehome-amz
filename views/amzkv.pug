doctype html
html(lang="en")
head
  meta(charset="UTF-8")
  meta(name="viewport", content="width=device-width, initial-scale=1.0")
  title 产品规格管理
  style.
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    .form-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    select, input {
      padding: 8px;
      width: 100%;
      box-sizing: border-box;
    }
    button {
      padding: 8px 15px;
      background: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
      margin-right: 10px;
    }
    button:hover {
      background: #45a049;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    .editable-row input {
      width: 95%;
    }
    .actions {
      white-space: nowrap;
    }
    .notification {
      padding: 10px;
      margin: 10px 0;
      border-radius: 4px;
      display: none;
    }
    .success {
      background-color: #dff0d8;
      color: #3c763d;
    }
    .error {
      background-color: #f2dede;
      color: #a94442;
    }

body
  h1 产品规格管理
  
  // 国家/SKU选择表单
  .form-group
    label(for="country") 国家编码:
    select#country(name="country")
      option(value="") -- 请选择国家 --
      option(value="US") 美国
      option(value="CA") 加拿大
      option(value="UK") 英国
      option(value="JP") 日本
  
  .form-group
    label(for="sku") 产品SKU:
    input#sku(type="text", name="sku", placeholder="输入产品SKU编码")
  
  button#fetchSpecs 查询规格
  
  // 键值对管理区域
  #specsContainer(style="display: none;")
    h2 规格键值对
    table#specsTable
      thead
        tr
          th 键名
          th 值
          th 操作
      tbody#specsBody
    
    button#addRow 新增行
    button#saveAll 保存所有变更
    
    .notification#notification
  
  script.
    document.addEventListener('DOMContentLoaded', function() {
      const countrySelect = document.getElementById('country');
      const skuInput = document.getElementById('sku');
      const fetchButton = document.getElementById('fetchSpecs');
      const specsContainer = document.getElementById('specsContainer');
      const specsBody = document.getElementById('specsBody');
      const addRowButton = document.getElementById('addRow');
      const saveAllButton = document.getElementById('saveAll');
      const notification = document.getElementById('notification');
      
      // 查询现有规格
      fetchButton.addEventListener('click', async function() {
        const country = countrySelect.value;
        const sku = skuInput.value.trim();
        
        if (!country || !sku) {
          showNotification('请选择国家和输入SKU', 'error');
          return;
        }
        
        try {
          const response = await fetch(`/api/specs?sku_code=${sku}&country_code=${country}`);
          const specs = await response.json();
          
          renderSpecs(specs);
          specsContainer.style.display = 'block';
        } catch (error) {
          console.error('查询失败:', error);
          showNotification('查询规格失败: ' + error.message, 'error');
        }
      });
      
      // 渲染规格列表
      function renderSpecs(specs) {
        specsBody.innerHTML = '';
        
        if (specs.length === 0) {
          specsBody.innerHTML = '<tr><td colspan="3">暂无规格数据</td></tr>';
          return;
        }
        
        specs.forEach(spec => {
          addRowToTable(spec.spec_key, spec.spec_value, false);
        });
      }
      
      // 添加新行
      addRowButton.addEventListener('click', function() {
        addRowToTable('', '', true);
      });
      
      // 添加行到表格
      function addRowToTable(key, value, isNew) {
        const row = document.createElement('tr');
        row.className = 'editable-row';
        
        row.innerHTML = `
          <td><input type="text" class="spec-key" value="${key}" ${!isNew ? 'readonly' : ''}></td>
          <td><input type="text" class="spec-value" value="${value}"></td>
          <td class="actions">
            <button class="save-row">${isNew ? '添加' : '更新'}</button>
            <button class="delete-row">删除</button>
          </td>
        `;
        
        specsBody.appendChild(row);
        
        // 添加行事件监听
        row.querySelector('.save-row').addEventListener('click', () => saveRow(row, isNew));
        row.querySelector('.delete-row').addEventListener('click', () => deleteRow(row, key));
      }
      
      // 保存单行
      async function saveRow(row, isNew) {
        const country = countrySelect.value;
        const sku = skuInput.value.trim();
        const keyInput = row.querySelector('.spec-key');
        const valueInput = row.querySelector('.spec-value');
        
        const key = keyInput.value.trim();
        const value = valueInput.value.trim();
        
        if (!key) {
          showNotification('键名不能为空', 'error');
          return;
        }
        
        try {
          const response = await fetch('/api/specs', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              sku_code: sku,
              country_code: country,
              spec_key: key,
              spec_value: value
            })
          });
          
          const result = await response.json();
          
          if (response.ok) {
            showNotification(`规格 ${key} ${isNew ? '添加' : '更新'}成功`, 'success');
            // 如果是新增，将键设为只读
            if (isNew) {
              keyInput.readOnly = true;
              row.querySelector('.save-row').textContent = '更新';
            }
          } else {
            throw new Error(result.error || '保存失败');
          }
        } catch (error) {
          console.error('保存失败:', error);
          showNotification('保存失败: ' + error.message, 'error');
        }
      }
      
      // 删除单行
      async function deleteRow(row, key) {
        const country = countrySelect.value;
        const sku = skuInput.value.trim();
        
        if (!confirm(`确定要删除规格键 "${key}" 吗？`)) {
          return;
        }
        
        try {
          const response = await fetch(`/api/specs/${sku}/${country}/${key}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            showNotification(`规格 ${key} 删除成功`, 'success');
            row.remove();
            
            // 如果表格为空，显示提示
            if (specsBody.querySelectorAll('tr').length === 0) {
              specsBody.innerHTML = '<tr><td colspan="3">暂无规格数据</td></tr>';
            }
          } else {
            const result = await response.json();
            throw new Error(result.error || '删除失败');
          }
        } catch (error) {
          console.error('删除失败:', error);
          showNotification('删除失败: ' + error.message, 'error');
        }
      }
      
      // 保存所有变更
      saveAllButton.addEventListener('click', async function() {
        const rows = specsBody.querySelectorAll('tr.editable-row');
        const country = countrySelect.value;
        const sku = skuInput.value.trim();
        
        if (!country || !sku) {
          showNotification('请先选择国家和输入SKU', 'error');
          return;
        }
        
        if (rows.length === 0) {
          showNotification('没有可保存的规格数据', 'error');
          return;
        }
        
        try {
          const promises = [];
          
          rows.forEach(row => {
            const key = row.querySelector('.spec-key').value.trim();
            const value = row.querySelector('.spec-value').value.trim();
            
            if (key) {
              promises.push(
                fetch('/api/specs', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    sku_code: sku,
                    country_code: country,
                    spec_key: key,
                    spec_value: value
                  })
                })
              );
            }
          });
          
          const results = await Promise.all(promises);
          const allSuccess = results.every(res => res.ok);
          
          if (allSuccess) {
            showNotification('所有规格保存成功', 'success');
          } else {
            throw new Error('部分规格保存失败');
          }
        } catch (error) {
          console.error('批量保存失败:', error);
          showNotification('保存失败: ' + error.message, 'error');
        }
      });
      
      // 显示通知
      function showNotification(message, type) {
        notification.textContent = message;
        notification.className = 'notification ' + type;
        notification.style.display = 'block';
        
        setTimeout(() => {
          notification.style.display = 'none';
        }, 5000);
      }
    });