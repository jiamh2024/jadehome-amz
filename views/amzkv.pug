doctype html
html(lang="zh-CN")
head
  meta(charset="UTF-8")
  meta(name="viewport", content="width=device-width, initial-scale=1.0")
  title 产品规格管理
  link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css", rel="stylesheet")
  link(href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css", rel="stylesheet")
  style.
    .form-container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
    }
    .table-container {
      margin-top: 20px;
    }
    .editable-row input {
      width: 95%;
    }
    .actions {
      white-space: nowrap;
    }
    .flag-icon {
      width: 20px;
      margin-right: 5px;
    }
    .select2-container {
      width: 100% !important;
    }

body
  .form-container
    h1.mb-4 产品规格管理
    
    // 查询表单
    .card.mb-4
      .card-body
        h5.card-title 查询条件
        .row
          .col-md-6
            .mb-3
              label.form-label(for="country") 国家/地区
              select#country.form-select(name="country")
                option(value="") 加载中...
          .col-md-6
            .mb-3
              label.form-label(for="sku") 产品SKU
              select#sku.form-select(name="sku")
                option(value="") 请先选择国家
        button#fetchSpecs.btn.btn-primary 查询规格
        button#copySpecs.btn.btn-secondary.ms-2 复制规格
    
    // 规格管理区域
    #specsContainer.card(style="display: none;")
      .card-body
        .d-flex.justify-content-between.align-items-center.mb-3
          h5.card-title 规格键值对
          div
            button#addRow.btn.btn-success.btn-sm.me-2 新增行
            button#saveAll.btn.btn-primary.btn-sm 保存所有变更
        
        .table-responsive
          table#specsTable.table.table-striped.table-hover
            thead
              tr
                th(style="width: 30%") 键名
                th(style="width: 45%") 值
                th(style="width: 10%") 序号
                th(style="width: 15%") 操作
            tbody#specsBody
              tr
                td(colspan="3", class="text-center text-muted") 请先选择国家和SKU进行查询
        
        #notification.alert.mt-3(style="display: none")

  script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js")
  script(src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js")
  script(src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js")
  script.
    // 将showNotification函数移到DOMContentLoaded外部，使其成为全局函数
    function showNotification(message, type) {
      const notification = document.getElementById('notification');
      notification.textContent = message;
      notification.className = `alert alert-${type} mt-3`;
      notification.style.display = 'block';
      
      setTimeout(() => {
        notification.style.display = 'none';
      }, 5000);
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      // 初始化Select2
      $('#country').select2();
      $('#sku').select2();
      
     // 获取所有必要的DOM元素
      const countrySelect = document.getElementById('country');
      const skuSelect = document.getElementById('sku');
      const fetchButton = document.getElementById('fetchSpecs');
      const specsContainer = document.getElementById('specsContainer');
      const specsBody = document.getElementById('specsBody');
      const addRowButton = document.getElementById('addRow');
      const saveAllButton = document.getElementById('saveAll');
      const copySpecsButton = document.getElementById('copySpecs');
      const copySpecsModal = document.getElementById('copySpecsModal');
      const targetSkuInput = document.getElementById('targetSku');
      const targetCountrySelect = document.getElementById('targetCountry');
      const confirmCopyButton = document.getElementById('confirmCopy');
      const cancelCopyButton = document.getElementById('cancelCopy');
      const closeCopyModalButton = document.getElementById('closeCopyModal');
      
      // 只创建一次模态框实例
      let copySpecsModalInstance;
      
      // 添加模态框隐藏事件监听器 - 添加存在性检查
      if (copySpecsModal) {
        copySpecsModal.addEventListener('hidden.bs.modal', function() {
          closeModalAndClearInput();
        });
      }
      
      // 加载国家列表
      loadCountries();
      
      // 国家选择变化时加载SKU
      $('#country').on('change', function() {
        const country = this.value;
        if (country) {
          loadSKUs(country);  // 确保传递country参数
        } else {
          $('#sku').empty().append('<option value="">请先选择国家</option>');
        }
      });
      
      // 从API加载国家列表
      async function loadCountries() {
        try {
          const response = await fetch('/api/country');
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const countries = await response.json();
          
          $('#country').empty().append('<option value="">-- 请选择国家 --</option>');
          
          countries.forEach(country => {
            $('#country').append(`<option value="${country.country_code}">${country.country_name}</option>`);
          });
          
        } catch (error) {
          console.error('加载国家列表失败:', error);
          $('#country').empty().append('<option value="">加载失败，请刷新页面</option>');
          showNotification('加载国家列表失败: ' + error.message, 'danger');
        }
      }
      
      // 根据国家加载SKU列表
      async function loadSKUs(country) {
        try {
          $('#sku').empty().append('<option value="">加载中...</option>');
          
          // 添加足够大的limit参数获取所有SKU，同时传递country参数
          const response = await fetch(`/api/sku?limit=1000&country_code=${country}`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const skus = await response.json();
          
          $('#sku').empty().append('<option value="">-- 请选择SKU --</option>');
          
          if (!skus.data || !skus.data.skus || skus.data.skus.length === 0) {
            $('#sku').append('<option value="">该国家暂无SKU数据</option>');
          } else {
            skus.data.skus.forEach(sku => {
              $('#sku').append(`<option value="${sku.sku_code}">${sku.sku_code}</option>`);
            });
          }
          
        } catch (error) {
          console.error('加载SKU列表失败:', error);
          $('#sku').empty().append('<option value="">加载失败，请重试</option>');
          showNotification('加载SKU列表失败: ' + error.message, 'danger');
        }
      }
      
      // 查询现有规格
      fetchButton.addEventListener('click', async function() {
        const country = countrySelect.value;
        const sku = skuSelect.value;
        
        if (!country || !sku) {
          showNotification('请选择和国家SKU', 'danger');
          return;
        }
        
        try {
          const response = await fetch(`/api/kv?sku_code=${sku}&country_code=${country}`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const specs = await response.json();
          
          if (specs.length === 0) {
            specsBody.innerHTML = '<tr><td colspan="3" class="text-center text-muted">没有找到规格数据</td></tr>';
          } else {
            renderSpecs(specs);
          }
          
          specsContainer.style.display = 'block';
        } catch (error) {
          console.error('查询规格失败:', error);
          showNotification('查询规格失败: ' + error.message, 'danger');
        }
      });
      
      // 渲染规格列表
      function renderSpecs(specs) {
        specsBody.innerHTML = '';
        
        if (specs.length === 0) {
          specsBody.innerHTML = '<tr><td colspan="3" class="text-center text-muted">没有规格数据</td></tr>';
          return;
        }
        
        // 按sort_order排序（如果有）
        specs.sort((a, b) => {
          if (a.sort_order !== undefined && b.sort_order !== undefined) {
            return a.sort_order - b.sort_order;
          }
          return 0;
        });
        
        specs.forEach(spec => {
          addRowToTable(spec.spec_key, spec.spec_value, spec.sort_order, false);
        });
      }

      // 添加行到表格
      function addRowToTable(key = '', value = '', sortOrder = '', isNew = true) {
        const newRow = document.createElement('tr');
        newRow.className = 'editable-row';
        
        newRow.innerHTML = `
          <td>
            <input type="text" class="spec-key form-control form-control-sm" value="${key}" ${isNew ? '' : 'readonly'}>
          </td>
          <td>
            <input type="text" class="spec-value form-control form-control-sm" value="${value}">
          </td>
          <td>
            <input type="number" class="sort-order form-control form-control-sm" value="${sortOrder}" min="0">
          </td>
          <td class="actions">
            <button class="btn btn-sm ${isNew ? 'btn-primary save-row' : 'btn-success update-row'} me-1">
              ${isNew ? '保存' : '更新'}
            </button>
            <button class="btn btn-sm btn-danger delete-row">删除</button>
          </td>
        `;
        
        specsBody.appendChild(newRow);
        
        // 绑定保存/更新按钮事件
        const saveUpdateBtn = newRow.querySelector('.save-row, .update-row');
        saveUpdateBtn.addEventListener('click', function() {
          const key = newRow.querySelector('.spec-key').value.trim();
          const value = newRow.querySelector('.spec-value').value.trim();
          if (key) {
            saveRow(newRow, key, value);
          } else {
            showNotification('键名不能为空', 'warning');
          }
        });
        
        // 绑定删除按钮事件
        const deleteBtn = newRow.querySelector('.delete-row');
        deleteBtn.addEventListener('click', function() {
          const key = newRow.querySelector('.spec-key').value.trim();
          if (key) {
            deleteRow(newRow, key);
          } else {
            newRow.remove();
          }
        });
      }
        
        // 保存单行
      async function saveRow(row, key, value) {
        const country = countrySelect.value;
        const sku = skuSelect.value;
        
        if (!country || !sku) {
          showNotification('请先选择国家和SKU', 'danger');
          return;
        }
        
        try {
          const isNew = !row.querySelector('.spec-key').readOnly;
          const endpoint = '/api/kv';
          const method = isNew ? 'POST' : 'PUT';
          
          const response = await fetch(endpoint, {
            method: method,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              sku_code: sku,
              country_code: country,
              spec_key: key,
              spec_value: value || null,
              sort_order: parseInt(row.querySelector('.sort-order').value) || 0
            })
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || '保存失败');
          }
          
          if (isNew) {
            row.querySelector('.spec-key').readOnly = true;
            const saveBtn = row.querySelector('.save-row');
            saveBtn.textContent = '更新';
            saveBtn.className = 'btn btn-sm btn-success update-row me-1';
          }
          
          showNotification('保存成功', 'success');
        } catch (error) {
          console.error('保存失败:', error);
          showNotification('保存失败: ' + error.message, 'danger');
        }
      }
        
        // 删除单行
      async function deleteRow(row, key) {
        const country = countrySelect.value;
        const sku = skuSelect.value;
        
        if (!country || !sku) {
          showNotification('请先选择国家和SKU', 'danger');
          return;
        }
        
        if (confirm(`确定要删除规格 "${key}" 吗？`)) {
          try {
            const response = await fetch(`/api/kv?sku_code=${sku}&country_code=${country}&spec_key=${encodeURIComponent(key)}`, {
              method: 'DELETE'
            });
            
            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || '删除失败');
            }
            
            row.remove();
            showNotification('删除成功', 'success');
          } catch (error) {
            console.error('删除失败:', error);
            showNotification('删除失败: ' + error.message, 'danger');
          }
        }
      }
        
        // 添加新增行按钮事件监听器
        addRowButton.addEventListener('click', function() {
          addRowToTable('', '', '', true);
        });
        
        // 复制规格按钮点击事件 - 添加完整的存在性检查
        if (copySpecsButton) {
          copySpecsButton.addEventListener('click', function() {
            const country = countrySelect.value;
            const sku = skuSelect.value;
            
            if (!country || !sku) {
              showNotification('请先选择国家和SKU', 'danger');
              return;
            }
            
            // 检查是否已加载规格数据
            if (specsContainer && specsContainer.style.display === 'none') {
              showNotification('请先点击"查询规格"按钮加载当前SKU的规格数据', 'warning');
              return;
            }
            
            // 显示复制规格模态框，重用实例
            if (copySpecsModal) {
              if (!copySpecsModalInstance) {
                copySpecsModalInstance = new bootstrap.Modal(copySpecsModal);
              }
              if (targetSkuInput) targetSkuInput.value = '';
              if (targetCountrySelect) targetCountrySelect.value = ''; // 清空目标国家选择
              copySpecsModalInstance.show();
            } else {
              showNotification('复制规格功能当前不可用', 'warning');
            }
          });
        }
        
        // 修改所有获取DOM元素的地方，添加安全检查
        // 例如搜索按钮的事件监听器
        if (fetchButton) {
          fetchButton.addEventListener('click', async function() {
            // 确保countrySelect和skuSelect存在
            if (!countrySelect || !skuSelect) {
              showNotification('系统组件缺失，无法查询规格', 'danger');
              return;
            }
            
            const country = countrySelect.value;
            const sku = skuSelect.value;
            
            // 其余代码保持不变...
          });
        }
        
        // 关闭模态框时清空输入函数
        function closeModalAndClearInput() {
          if (targetSkuInput) targetSkuInput.value = '';
          if (targetCountrySelect) targetCountrySelect.value = ''; // 清空目标国家选择
        }
        
        // 添加新增行按钮事件监听器 - 添加存在性检查
        if (addRowButton) {
          addRowButton.addEventListener('click', function() {
            addRowToTable('', '', '', true);
          });
        }
        
        // 保存所有变更按钮事件监听器 - 添加存在性检查
        if (saveAllButton) {
          saveAllButton.addEventListener('click', async function() {
            // 确保specsBody、countrySelect和skuSelect存在
            if (!specsBody || !countrySelect || !skuSelect) {
              showNotification('系统组件缺失，无法保存变更', 'danger');
              return;
            }
            
            // 其余代码保持不变...
          });
        }
        
      //});
      
      // 确认复制按钮点击事件
      confirmCopyButton.addEventListener('click', async function() {
        const sourceCountry = countrySelect.value;
        const sourceSku = skuSelect.value;
        const targetCountry = targetCountrySelect.value; // 获取目标国家
        const targetSku = targetSkuInput.value.trim();
        
        if (!targetCountry || !targetSku) {
          showNotification('请选择目标国家并输入目标SKU代码', 'danger');
          return;
        }
        
        // 验证目标SKU是否存在
        try {
          const skuCheckResponse = await fetch(`/api/sku?sku_code=${targetSku}&country_code=${targetCountry}`);
          const skuCheckData = await skuCheckResponse.json();
          
          // 检查SKU是否存在
          const skuExists = skuCheckData.data && skuCheckData.data.skus && skuCheckData.data.skus.length > 0;
          
          // 如果SKU不存在且用户确认创建
          if (!skuExists) {
            if (!confirm(`目标SKU "${targetSku}" 在国家 "${targetCountry}" 中不存在，是否继续创建？`)) {
              return;
            }
            
            // 获取源SKU的详细信息用于创建新SKU
            showNotification('正在获取源SKU信息...', 'info');
            const sourceSkuResponse = await fetch(`/api/sku?sku_code=${sourceSku}&country_code=${sourceCountry}`);
            const sourceSkuData = await sourceSkuResponse.json();
            
            if (!sourceSkuResponse.ok || !sourceSkuData.data || !sourceSkuData.data.skus || sourceSkuData.data.skus.length === 0) {
              throw new Error('获取源SKU信息失败');
            }
            
            const sourceSkuInfo = sourceSkuData.data.skus[0];
            
            // 创建新SKU，使用源SKU的信息作为默认值
            showNotification('正在创建新SKU...', 'info');
            const createSkuResponse = await fetch('/api/sku', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                sku_code: targetSku,
                product_name: sourceSkuInfo.product_name || `Product ${targetSku}`,
                length: sourceSkuInfo.length || 0,
                width: sourceSkuInfo.width || 0,
                height: sourceSkuInfo.height || 0,
                weight: sourceSkuInfo.weight || 0,
                has_battery: sourceSkuInfo.has_battery || 0,
                battery_type: sourceSkuInfo.battery_type || null,
                purchase_cost: sourceSkuInfo.purchase_cost || 0,
                currency: sourceSkuInfo.currency || 'USD',
                asin: sourceSkuInfo.asin || null,
                country_code: targetCountry // 使用目标国家
              })
            });
            
            if (!createSkuResponse.ok) {
              const errorData = await createSkuResponse.json();
              throw new Error(`创建SKU失败: ${errorData.message || '未知错误'}`);
            }
            
            showNotification('SKU创建成功', 'success');
          }
          
          // 获取源SKU的规格数据
          const sourceSpecsResponse = await fetch(`/api/kv?sku_code=${sourceSku}&country_code=${sourceCountry}`);
          
          if (!sourceSpecsResponse.ok) {
            throw new Error(`获取源SKU规格失败: ${sourceSpecsResponse.status}`);
          }
          
          const sourceSpecs = await sourceSpecsResponse.json();
          
          if (sourceSpecs.length === 0) {
            showNotification('源SKU没有可用的规格数据', 'warning');
            return;
          }
          
          // 复制规格数据到目标SKU
          showNotification('开始复制规格数据...', 'info');
          
          try {
            // 并行复制所有规格
            const copyPromises = sourceSpecs.map(async (spec) => {
              const response = await fetch('/api/kv', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  sku_code: targetSku,
                  country_code: targetCountry, // 使用目标国家
                  spec_key: spec.spec_key,
                  spec_value: spec.spec_value,
                  sort_order: spec.sort_order
                })
              });
              
              if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`复制规格 ${spec.spec_key} 失败: ${errorData.error || '未知错误'}`);
              }
              
              return { success: true, key: spec.spec_key };
            });
            
            const results = await Promise.allSettled(copyPromises);
            
            // 统计成功和失败的数量
            const successful = results.filter(result => result.status === 'fulfilled' && !result.value.status).length;
            const existing = results.filter(result => result.status === 'fulfilled' && result.value.status === 'exists').length;
            const failed = results.filter(result => result.status === 'rejected').length;
            
            let message = `成功复制 ${successful} 条规格数据到SKU: ${targetSku} (${targetCountry})`;
            if (existing > 0) {
              message += `,${existing} 条规格已存在`;
            }
            if (failed > 0) {
              message += `,${failed} 条复制失败`;
            }
            
            showNotification(message, failed > 0 ? 'warning' : 'success');
            
            // 关闭模态框 - 使用已创建的实例
            if (copySpecsModalInstance) {
              copySpecsModalInstance.hide();
            }
            
            // 刷新目标国家的SKU列表
            loadSKUs(targetCountry);
          } catch (error) {
            console.error('批量复制规格失败:', error);
            showNotification('复制规格失败: ' + error.message, 'danger');
          }
        } catch (error) {
          console.error('复制规格过程中发生错误:', error);
          showNotification('操作失败: ' + error.message, 'danger');
        }
      });
      
      // 关闭模态框时清空输入
      function closeModalAndClearInput() {
        targetSkuInput.value = '';
        if (targetCountrySelect) {
          targetCountrySelect.value = '';
        }
      }
      
      cancelCopyButton.addEventListener('click', closeModalAndClearInput);
      closeCopyModalButton.addEventListener('click', closeModalAndClearInput);
    });  // 修复这里，将;改为}

// 复制规格模态框
#copySpecsModal.modal.fade
  .modal-dialog
    .modal-content
      .modal-header
        h5.modal-title 复制规格
        button#closeCopyModal.btn-close(type="button", data-bs-dismiss="modal", aria-label="Close")
      .modal-body
        p 请输入目标SKU代码和选择目标国家，系统将复制当前SKU的所有规格信息到目标SKU。
        .mb-3
          label.form-label(for="targetCountry") 目标国家
          select#targetCountry.form-select(name="targetCountry")
            option(value="") 加载中...
        .mb-3
          label.form-label(for="targetSku") 目标SKU
          input#targetSku.form-control(type="text", placeholder="请输入目标SKU代码")
      .modal-footer
        button#cancelCopy.btn.btn-secondary(type="button", data-bs-dismiss="modal") 取消
        button#confirmCopy.btn.btn-primary(type="button") 确认复制

script.
  // 为复制规格模态框添加国家列表加载功能
  document.addEventListener('DOMContentLoaded', function() {
    const copySpecsModal = document.getElementById('copySpecsModal');
    const targetCountrySelect = document.getElementById('targetCountry');
    
    // 初始化Select2
    if (targetCountrySelect) {
      $(targetCountrySelect).select2({
        dropdownParent: copySpecsModal // 错误处理时也添加这个选项
      });
    }
    
    // 当模态框显示时加载国家列表
    if (copySpecsModal && targetCountrySelect) {
      copySpecsModal.addEventListener('shown.bs.modal', function() {
        loadTargetCountries();
      });
    }
    
    // 加载目标国家列表的函数
    async function loadTargetCountries() {
      try {
        const response = await fetch('/api/country');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const countries = await response.json();
        
        if (targetCountrySelect) {
          targetCountrySelect.innerHTML = '<option value="">-- 请选择国家 --</option>';
          
          countries.forEach(country => {
            const option = document.createElement('option');
            option.value = country.country_code;
            option.textContent = country.country_name;
            targetCountrySelect.appendChild(option);
          });
          
          // 更新Select2以反映新选项
          $(targetCountrySelect).select2('destroy').select2({
            dropdownParent: copySpecsModal // 同样在更新时添加这个选项
          });
        }
      } catch (error) {
        console.error('加载目标国家列表失败:', error);
        if (targetCountrySelect) {
          targetCountrySelect.innerHTML = '<option value="">加载失败，请刷新页面</option>';
          $(targetCountrySelect).select2('destroy').select2();
        }
      }
    }
  });