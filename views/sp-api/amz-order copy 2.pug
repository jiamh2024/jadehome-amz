doctype html
html(lang="en")
head
  meta(charset="UTF-8")
  meta(name="viewport", content="width=device-width, initial-scale=1.0")
  title 亚马逊多国当日订单
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css")
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css")
  style.
    .loading {
      text-align: center;
      margin: 20px 0;
    }
    .spinner-border {
      width: 3rem; 
      height: 3rem;
    }
    .market-section {
      margin-bottom: 30px;
    }
    .market-header {
      background-color: #f8f9fa;
      padding: 10px 15px;
      border-radius: 5px;
      margin-bottom: 15px;
    }
    .order-card {
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .order-header {
      background-color: #f8f9fa;
      padding: 10px 15px;
      border-bottom: 1px solid #eee;
      font-weight: bold;
    }
    .order-body {
      padding: 15px;
    }
    .product-image {
      max-width: 80px;
      max-height: 80px;
      margin-right: 15px;
    }
    .order-item-details {
      background-color: #f9f9f9;
      padding: 10px;
      margin-top: 10px;
      border-radius: 5px;
    }
    .badge-market {
      font-size: 0.75em;
      margin-left: 5px;
    }

body
  .container.mt-4
    h1.mb-4 亚马逊多国当日订单
    p.text-muted 自动查询各市场今日订单
    
    // 加载指示器
    .loading#loading
      .spinner-border.text-primary(role="status")
      p.mt-2 正在查询亚马逊API...
    
    // 各市场订单容器
    #ordersContainer
    
  script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js")
  script.
    document.addEventListener('DOMContentLoaded', function() {
      const loading = document.getElementById('loading');
      const ordersContainer = document.getElementById('ordersContainer');
      
      // 支持的亚马逊市场
      const markets = [
        { id: 'US', name: '美国', color: 'danger' },
        { id: 'CA', name: '加拿大', color: 'danger' },
        { id: 'UK', name: '英国', color: 'primary' },
        { id: 'AE', name: '阿联酋', color: 'success' },
        { id: 'SA', name: '沙特', color: 'success' }
      ];
      
      // 页面加载时自动查询
      loadAllMarketOrders();
      
      async function loadAllMarketOrders() {
        try {
          ordersContainer.innerHTML = '';
          
          // 并行查询所有市场
          const marketPromises = markets.map(market => {
            return getMarketOrders(market.id);
          });
          
          const allMarketResults = await Promise.all(marketPromises);
          
          // 渲染所有市场结果
          allMarketResults.forEach((result, index) => {
            if(result.orders && result.orders.length > 0) {
              renderMarketOrders(markets[index], result.orders);
            }
          });
          
          // 如果没有数据，显示提示
          if(ordersContainer.innerHTML === '') {
            ordersContainer.innerHTML = `
              <div class="alert alert-info">
                <i class="bi bi-info-circle-fill"></i> 今日没有找到任何订单
              </div>
            `;
          }
          
        } catch (error) {
          console.error('订单查询错误:', error);
          ordersContainer.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle-fill"></i> 查询失败: ${error.message}
            </div>
          `;
        } finally {
          loading.style.display = 'none';
        }
      }
      
      // 获取单个市场的订单
      async function getMarketOrders(marketplaceId) {
        // 设置查询时间为当天的00:00:00到23:59:59
        const today = new Date();
        const startDate = new Date(today);
        startDate.setHours(0, 0, 0, 0);
        
        const endDate = new Date(today);
        endDate.setHours(23, 59, 59, 999);
        
        const params = {
          marketplaceId: marketplaceId,
          createdAfter: startDate.toISOString(),
          createdBefore: endDate.toISOString()
        };
        
        // 调用后端API（实际项目中替换为您的API端点）
        const response = await fetch('/api/amzapi/today?' + new URLSearchParams(params), {
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        const data = await response.json();
        
        if (response.ok) {
          return {
            marketplaceId: marketplaceId,
            orders: data.payload.data.payload.Orders || []
          };
        } else {
          throw new Error(data.message || `获取${marketplaceId}市场订单失败`);
        }
      }
      
      // 渲染单个市场的订单
      function renderMarketOrders(market, orders) {
        const marketSection = document.createElement('div');
        marketSection.className = 'market-section';
        
        marketSection.innerHTML = `
          <div class="market-header d-flex justify-content-between align-items-center">
            <h5>
              <i class="bi bi-flag-fill text-${market.color}"></i>
              ${market.name}市场 (${orders.length}个订单)
            </h5>
            <span class="badge bg-secondary">${market.id}</span>
          </div>
          ${orders.map(order => renderOrder(order, market.id)).join('')}
        `;
        
        ordersContainer.appendChild(marketSection);
        
        // 为每个订单添加行项目详情点击事件
        marketSection.querySelectorAll('.show-item-details').forEach(btn => {
          btn.addEventListener('click', async function() {
            const orderId = this.getAttribute('data-order-id');
            const container = document.getElementById(`itemDetails-${orderId}`);
            
            if (container.innerHTML.trim() === '') {
              try {
                this.innerHTML = '<i class="bi bi-hourglass"></i> 加载中...';
                
                // 调用后端API获取订单行项目详情
                const response = await fetch(`/api/amzapi/${orderId}/items?marketplaceId=${market.id}`);
                const data = await response.json();
                
                if (response.ok) {
                  container.innerHTML = renderOrderItems(data.payload.payload.OrderItems || []);
                } else {
                  throw new Error(data.message || '获取商品详情失败');
                }
              } catch (error) {
                console.error('获取商品详情错误:', error);
                container.innerHTML = `
                  <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle-fill"></i> 获取商品详情失败: ${error.message}
                  </div>
                `;
              } finally {
                this.innerHTML = '<i class="bi bi-chevron-up"></i> 收起详情';
              }
            } else {
              container.innerHTML = '';
              this.innerHTML = '<i class="bi bi-chevron-down"></i> 查看详情';
            }
          });
        });
      }
      
      // 渲染单个订单
      function renderOrder(order, marketplace) {
        return `
          <div class="card order-card">
            <div class="order-header d-flex justify-content-between">
              <span>
                订单号: ${order.AmazonOrderId}
                <span class="badge bg-secondary badge-market">${marketplace}</span>
              </span>
              <span class="badge bg-${getStatusBadgeColor(order.OrderStatus)}">
                ${order.OrderStatus}
              </span>
            </div>
            <div class="order-body">
              <div class="row">
                <div class="col-md-6">
                  <p><strong>下单时间:</strong> ${new Date(order.PurchaseDate).toLocaleString()}</p>
                  <p><strong>金额:</strong> ${order.OrderTotal?.Amount || 'N/A'} ${order.OrderTotal?.CurrencyCode || ''}</p>
                  <p><strong>买家:</strong> ${order.BuyerInfo?.BuyerEmail || '匿名'}</p>
                </div>
                <div class="col-md-6">
                  <p><strong>配送地址:</strong></p>
                  <address>
                    ${order.ShippingAddress?.Name || ''}<br>
                    ${order.ShippingAddress?.AddressLine1 || ''}<br>
                    ${order.ShippingAddress?.City || ''}, ${order.ShippingAddress?.StateOrRegion || ''} ${order.ShippingAddress?.PostalCode || ''}<br>
                    ${order.ShippingAddress?.CountryCode || ''}
                  </address>
                </div>
              </div>
              
              <div class="d-flex justify-content-between align-items-center mt-3">
                <h6 class="mb-0">商品列表 (${order.NumberOfItemsShipped || 0}件)</h6>
                <button class="btn btn-sm btn-outline-primary show-item-details" data-order-id="${order.AmazonOrderId}">
                  <i class="bi bi-chevron-down"></i> 查看详情
                </button>
              </div>
              
              <div id="itemDetails-${order.AmazonOrderId}" class="order-item-details"></div>
            </div>
          </div>
        `;
      }
      
      // 渲染订单行项目详情
      function renderOrderItems(items) {
        if (items.length === 0) {
          return '<div class="alert alert-info">没有找到商品详情</div>';
        }
        
        return `
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>商品</th>
                  <th>ASIN</th>
                  <th>数量</th>
                  <th>单价</th>
                  <th>小计</th>
                  <th>运费</th>
                  <th>促销</th>
                  <th>税费</th>
                </tr>
              </thead>
              <tbody>
                ${items.map(item => `
                  <tr>
                    <td>
                      <div class="d-flex">
                        ${item.ASIN ? `<img src="https://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=US&ASIN=${item.ASIN}&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=SL250" class="product-image">` : ''}
                        <div>
                          ${item.Title || '未知商品'}<br>
                          <small class="text-muted">SKU: ${item.SellerSKU || 'N/A'}</small>
                        </div>
                      </div>
                    </td>
                    <td>${item.ASIN || 'N/A'}</td>
                    <td>${item.QuantityOrdered}</td>
                    <td>${item.ItemPrice?.Amount || 'N/A'} ${item.ItemPrice?.CurrencyCode || ''}</td>
                    <td>${item.ItemPrice?.Amount ? (item.ItemPrice.Amount * item.QuantityOrdered).toFixed(2) : 'N/A'} ${item.ItemPrice?.CurrencyCode || ''}</td>
                    <td>${item.ShippingPrice?.Amount || '0.00'} ${item.ShippingPrice?.CurrencyCode || ''}</td>
                    <td>${item.PromotionDiscount?.Amount || '0.00'} ${item.PromotionDiscount?.CurrencyCode || ''}</td>
                    <td>${item.ItemTax?.Amount || '0.00'} ${item.ItemTax?.CurrencyCode || ''}</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        `;
      }
      
      // 获取状态标签颜色
      function getStatusBadgeColor(status) {
        const colors = {
          'Pending': 'warning',
          'Unshipped': 'info',
          'Shipped': 'success',
          'Canceled': 'danger',
          'PendingAvailability': 'secondary'
        };
        return colors[status] || 'primary';
      }
    });