doctype html
html(lang="en")
head
  meta(charset="UTF-8")
  meta(name="viewport", content="width=device-width, initial-scale=1.0")
  title 亚马逊订单查询(沙箱)
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css")
  style.
    .loading {
      display: none;
      text-align: center;
      margin: 20px 0;
    }
    .spinner-border {
      width: 3rem; 
      height: 3rem;
    }
    .order-card {
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .order-header {
      background-color: #f8f9fa;
      padding: 10px 15px;
      border-bottom: 1px solid #eee;
      font-weight: bold;
    }
    .order-body {
      padding: 15px;
    }
    .product-image {
      max-width: 80px;
      max-height: 80px;
      margin-right: 15px;
    }
    .api-response {
      background-color: #f8f9fa;
      padding: 15px;
      border-radius: 5px;
      margin-top: 20px;
      font-family: monospace;
      white-space: pre-wrap;
      display: none;
    }

body
  .container.mt-4
    h1.mb-4 亚马逊订单查询(沙箱)
    
    // 查询表单
    .card.mb-4
      .card-body
        form#searchForm
          .row.g-3
            .col-md-4
              label.form-label 开始日期
              input.form-control(type="date", name="createdAfter", required)
            .col-md-4
              label.form-label 结束日期
              input.form-control(type="date", name="createdBefore", required)
            .col-md-4
              label.form-label 订单状态
              select.form-select(name="orderStatus")
                option(value="") 全部
                option(value="Pending") 待处理
                option(value="Unshipped") 未发货
                option(value="Shipped") 已发货
                option(value="Canceled") 已取消
          .mt-3
            button.btn.btn-primary(type="submit") 查询订单
            button.btn.btn-outline-secondary.ms-2(type="button", id="toggleRaw") 显示原始数据
    
    // 加载指示器
    .loading#loading
      .spinner-border.text-primary(role="status")
      p.mt-2 正在查询亚马逊API...
    
    // 订单列表
    #ordersContainer
    
    // 原始API响应
    .api-response#rawResponse
    
  script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js")
  script.
    document.addEventListener('DOMContentLoaded', function() {
      const searchForm = document.getElementById('searchForm');
      const loading = document.getElementById('loading');
      const ordersContainer = document.getElementById('ordersContainer');
      const rawResponse = document.getElementById('rawResponse');
      const toggleRaw = document.getElementById('toggleRaw');
      
      // 设置默认日期（最近7天）
      const today = new Date();
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(today.getDate() - 7);
      
      document.querySelector('[name="createdAfter"]').valueAsDate = sevenDaysAgo;
      document.querySelector('[name="createdBefore"]').valueAsDate = today;
      
      // 表单提交
      searchForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const params = {
          createdAfter: new Date(formData.get('createdAfter')).toISOString(),
          createdBefore: new Date(formData.get('createdBefore')).toISOString()
        };
        
        if (formData.get('orderStatus')) {
          params.orderStatus = formData.get('orderStatus');
        }
        
        try {
          loading.style.display = 'block';
          ordersContainer.innerHTML = '';
          rawResponse.style.display = 'none';
          
          // 调用后端API（实际项目中替换为您的API端点）
          const response = await fetch('/api/amzapi?' + new URLSearchParams(params), {
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const data = await response.json();
          
          //console.log('API响应:', data);

          if (response.ok) {
            displayOrders(data.payload.payload.Orders || []);
            rawResponse.textContent = JSON.stringify(data, null, 2);
          } else {
            throw new Error(data.message || '查询失败');
          }
        } catch (error) {
          console.error('订单查询错误:', error);
          ordersContainer.innerHTML = `
            <div class="alert alert-danger">
              查询失败: ${error.message}
            </div>
          `;
        } finally {
          loading.style.display = 'none';
        }
      });
      
      // 显示原始数据切换
      toggleRaw.addEventListener('click', function() {
        rawResponse.style.display = rawResponse.style.display === 'none' ? 'block' : 'none';
      });
      
      // 渲染订单列表
      function displayOrders(orders) {
        if (orders.length === 0) {
          ordersContainer.innerHTML = `
            <div class="alert alert-info">
              没有找到符合条件的订单
            </div>
          `;
          return;
        }
        
        ordersContainer.innerHTML = `
          <h5 class="mb-3">找到 ${orders.length} 个订单</h5>
          ${orders.map(order => renderOrder(order)).join('')}
        `;
      }
      
      // 渲染单个订单
      function renderOrder(order) {
        return `
          <div class="card order-card">
            <div class="order-header d-flex justify-content-between">
              <span>订单号: ${order.AmazonOrderId}</span>
              <span class="badge bg-${getStatusBadgeColor(order.OrderStatus)}">
                ${order.OrderStatus}
              </span>
            </div>
            <div class="order-body">
              <div class="row">
                <div class="col-md-6">
                  <p><strong>下单时间:</strong> ${new Date(order.PurchaseDate).toLocaleString()}</p>
                  <p><strong>金额:</strong> ${order.OrderTotal?.Amount || 'N/A'} ${order.OrderTotal?.CurrencyCode || ''}</p>
                  <p><strong>买家:</strong> ${order.BuyerInfo?.BuyerEmail || '匿名'}</p>
                </div>
                <div class="col-md-6">
                  <p><strong>配送地址:</strong></p>
                  <address>
                    ${order.ShippingAddress?.Name || ''}<br>
                    ${order.ShippingAddress?.AddressLine1 || ''}<br>
                    ${order.ShippingAddress?.City || ''}, ${order.ShippingAddress?.StateOrRegion || ''} ${order.ShippingAddress?.PostalCode || ''}<br>
                    ${order.ShippingAddress?.CountryCode || ''}
                  </address>
                </div>
              </div>
              
              <h6 class="mt-3">商品列表</h6>
              <div class="table-responsive">
                <table class="table table-sm">
                  <thead>
                    <tr>
                      <th>商品</th>
                      <th>ASIN</th>
                      <th>数量</th>
                      <th>价格</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${order.OrderItems?.map(item => `
                      <tr>
                        <td>
                          <div class="d-flex">
                            ${item.ASIN ? `<img src="https://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=US&ASIN=${item.ASIN}&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=SL250" class="product-image">` : ''}
                            <div>
                              ${item.Title || '未知商品'}<br>
                              <small class="text-muted">SKU: ${item.SellerSKU || 'N/A'}</small>
                            </div>
                          </div>
                        </td>
                        <td>${item.ASIN || 'N/A'}</td>
                        <td>${item.QuantityOrdered}</td>
                        <td>${item.ItemPrice?.Amount || 'N/A'} ${item.ItemPrice?.CurrencyCode || ''}</td>
                      </tr>
                    `).join('') || '<tr><td colspan="4">无商品信息</td></tr>'}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        `;
      }
      
      // 获取状态标签颜色
      function getStatusBadgeColor(status) {
        const colors = {
          'Pending': 'warning',
          'Unshipped': 'info',
          'Shipped': 'success',
          'Canceled': 'danger',
          'PendingAvailability': 'secondary'
        };
        return colors[status] || 'primary';
      }
    });