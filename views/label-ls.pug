doctype html
html(lang="zh-CN")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title 标签模板管理 - JadeHome
    link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet")
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css")
    script(src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")
    style.
      .table-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2rem;
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
        border-radius: 8px;
      }
      .search-box {
        max-width: 400px;
      }
      .dimension-badge {
        font-family: monospace;
        background-color: #88898a;
      }
      .pagination {
        justify-content: center;
      }
      .action-buttons {
        display: flex;
        gap: 8px;
      }
      .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #6c757d;
      }

  body
    .table-container
      .d-flex.justify-content-between.mb-4.align-items-center
        h3 标签模板管理
        a.btn.btn-primary(href="/label/add") 
          i.bi.bi-plus-circle
          |  添加新标签模板

      .d-flex.justify-content-between.mb-4
        .search-box
          .input-group
            input#searchInput.form-control(
              type="text" 
              placeholder="搜索标签模板..."
              onkeyup="searchTemplates()"
            )
            button.btn.btn-outline-secondary(type="button")
              i.bi.bi-search

        .d-flex.gap-2
          select#pageLimit.form-select(onchange="loadData()" style="width: 100px")
            option(value="10") 10条/页
            option(value="20") 20条/页
            option(value="50") 50条/页
            option(value="100") 100条/页

      // 消息提示框
      div#messageContainer(style="display: none; margin-bottom: 1rem;")

      table.table.table-striped.table-hover
        thead
          tr
            th 编号
            th 尺寸
            th 邮箱
            th 网址
            th 创建时间
            th 更新时间
            th 操作
        tbody#templatesTableBody
          // 表格内容将通过JavaScript动态加载

      // 分页控制
      div#paginationControls
        nav
          ul.pagination
            // 分页内容将通过JavaScript动态加载

      // 空状态提示
      div#emptyState(class="empty-state" style="display: none;")
        i.bi.bi-folder-x(style="font-size: 4rem; margin-bottom: 1rem;")
        h4 暂无标签模板
        p 点击"添加新标签模板"按钮创建您的第一个标签模板
        a.btn.btn-primary(href="/label-add") 添加标签模板

    script.
      // 当前页码和每页显示条数
      let currentPage = 1;
      let pageLimit = 10;
      let templatesData = [];
      let filteredTemplates = [];

      // 初始化加载数据
      document.addEventListener('DOMContentLoaded', function() {
        loadData();
      });

      // 加载标签模板数据
      function loadData() {
        pageLimit = parseInt(document.getElementById('pageLimit').value);
        currentPage = 1;
        
        // 显示加载状态
        document.getElementById('templatesTableBody').innerHTML = '<tr><td colspan="7" class="text-center">加载中...</td></tr>';
        document.getElementById('emptyState').style.display = 'none';
        document.getElementById('paginationControls').style.display = 'none';

        // 调用API获取标签模板数据
        axios.get('/api/label')
          .then(function(response) {
            if (response.data.success && response.data.data) {
              templatesData = response.data.data;
              filteredTemplates = templatesData;
              renderTable();
              renderPagination();
              checkEmptyState();
            } else {
              showMessage('获取标签模板数据失败', 'danger');
              document.getElementById('emptyState').style.display = 'block';
            }
          })
          .catch(function(error) {
            console.error('Error fetching label templates:', error);
            showMessage('获取标签模板数据失败，请稍后再试', 'danger');
            document.getElementById('emptyState').style.display = 'block';
          });
      }

      // 渲染表格
      function renderTable() {
        const tableBody = document.getElementById('templatesTableBody');
        tableBody.innerHTML = '';

        // 计算分页偏移量
        const startIndex = (currentPage - 1) * pageLimit;
        const endIndex = startIndex + pageLimit;
        const paginatedTemplates = filteredTemplates.slice(startIndex, endIndex);

        if (paginatedTemplates.length === 0) {
          tableBody.innerHTML = '<tr><td colspan="7" class="text-center">没有找到符合条件的标签模板</td></tr>';
          return;
        }

        // 渲染表格行
        paginatedTemplates.forEach(function(template) {
          const tr = document.createElement('tr');
          
          // 格式化时间
          const createdAt = new Date(template.created_at).toLocaleString('zh-CN');
          const updatedAt = template.updated_at ? new Date(template.updated_at).toLocaleString('zh-CN') : '-';
          
          tr.innerHTML = `
            <td>${template.id}</td>
            <td><span class="badge bg-secondary dimension-badge">${template.length}×${template.width}</span></td>
            <td>${template.email || '-'}</td>
            <td>${template.website ? `<a href="${template.website}" target="_blank">${template.website}</a>` : '-'}</td>
            <td>${createdAt}</td>
            <td>${updatedAt}</td>
            <td>
              <div class="action-buttons">
                <a href="/label/edit/${template.id}" class="btn btn-sm btn-primary" title="编辑">
                  <i class="bi bi-pencil"></i>
                </a>
                <button onclick="deleteTemplate(${template.id})" class="btn btn-sm btn-danger" title="删除">
                  <i class="bi bi-trash"></i>
                </button>
              </div>
            </td>
          `;
          
          tableBody.appendChild(tr);
        });
      }

      // 渲染分页控制
      function renderPagination() {
        const totalPages = Math.ceil(filteredTemplates.length / pageLimit);
        const paginationControls = document.getElementById('paginationControls');
        
        if (totalPages <= 1) {
          paginationControls.style.display = 'none';
          return;
        }

        paginationControls.style.display = 'block';
        const paginationList = paginationControls.querySelector('ul');
        paginationList.innerHTML = '';

        // 上一页按钮
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a>`;
        prevLi.addEventListener('click', function(e) {
          e.preventDefault();
          if (currentPage > 1) {
            currentPage--;
            renderTable();
            renderPagination();
          }
        });
        paginationList.appendChild(prevLi);

        // 页码按钮
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
        
        if (endPage - startPage + 1 < maxVisiblePages) {
          startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        for (let i = startPage; i <= endPage; i++) {
          const li = document.createElement('li');
          li.className = `page-item ${i === currentPage ? 'active' : ''}`;
          li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
          li.addEventListener('click', function(e) {
            e.preventDefault();
            currentPage = i;
            renderTable();
            renderPagination();
          });
          paginationList.appendChild(li);
        }

        // 下一页按钮
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next"><span aria-hidden="true">&raquo;</span></a>`;
        nextLi.addEventListener('click', function(e) {
          e.preventDefault();
          if (currentPage < totalPages) {
            currentPage++;
            renderTable();
            renderPagination();
          }
        });
        paginationList.appendChild(nextLi);
      }

      // 搜索标签模板
      function searchTemplates() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        
        filteredTemplates = templatesData.filter(function(template) {
          return template.id.toString().includes(searchTerm) ||
                 template.length.toString().includes(searchTerm) ||
                 template.width.toString().includes(searchTerm) ||
                 (template.email && template.email.toLowerCase().includes(searchTerm)) ||
                 (template.website && template.website.toLowerCase().includes(searchTerm));
        });
        
        currentPage = 1;
        renderTable();
        renderPagination();
        checkEmptyState();
      }

      // 检查空状态
      function checkEmptyState() {
        if (filteredTemplates.length === 0) {
          document.getElementById('emptyState').style.display = 'block';
        } else {
          document.getElementById('emptyState').style.display = 'none';
        }
      }

      // 删除标签模板
      function deleteTemplate(id) {
        if (confirm('确定要删除这个标签模板吗？删除后无法恢复！')) {
          axios.delete(`/api/label/${id}`)
            .then(function(response) {
              if (response.data.success) {
                showMessage('标签模板删除成功', 'success');
                loadData(); // 重新加载数据
              } else {
                showMessage(response.data.message || '删除失败', 'danger');
              }
            })
            .catch(function(error) {
              console.error('Error deleting label template:', error);
              showMessage('删除失败，请稍后再试', 'danger');
            });
        }
      }

      // 显示消息
      function showMessage(text, type = 'info') {
        const messageContainer = document.getElementById('messageContainer');
        messageContainer.className = `alert alert-${type}`;
        messageContainer.textContent = text;
        messageContainer.style.display = 'block';

        // 3秒后自动隐藏
        setTimeout(function() {
          messageContainer.style.display = 'none';
        }, 3000);
      }